#!/bin/bash

function help {
echo " ./configure.sh"
echo "     -s               configure as server"
echo "     -c               configure as client"
echo "     -ap              connect/configure Access Point"
echo "     --help           this help menu"
echo ""
exit 1
}

#-----------------------------------------------------------------------------#
PARAMS=""
while (( "$#" )); do
  case "$1" in
    -s)
      server
      shift
      ;;
    -c)
      client
      shift
      ;;
    -ap)
      access_point
      shift
      ;;
    --help)
      help
      shift 2
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done

#-----------------------------------------------------------------------------#
function menu_from_array()
{
  select choice; do
  # Check the selected menu item number
  if [ 1 -le "$REPLY" ] && [ "$REPLY" -le $# ];
  then
  break;
  else
  echo "Wrong selection: Select any number from 1-$#"
  fi
  done
}

function ap_connect {
echo '> Connecting to Access Point...'
read -p "- SSID: " ssid
read -p "- Password: " password
cat <<EOF > tools/wpa_tools/access_point.conf
network={
  ssid="$ssid"
  psk="$password"
}
EOF
echo '> Please choose from the list of available interfaces...'
interfaces_arr=($(ip link | awk -F: '$0 !~ "lo|vir|doc|eth|bat|^[^0-9]"{print $2}'))
menu_from_array "${interfaces_arr[@]}"
sudo wpa_supplicant -B -i $choice -c tools/wpa_tools/access_point.conf
sudo dhclient -v $choice
}

function ap_create {
echo '> Creating a Mesh Access Point...'
echo '> Please choose from the list of available interfaces...'
interfaces_arr=($(ip link | awk -F: '$0 !~ "lo|vir|doc|eth|bat|^[^0-9]"{print $2}'))
menu_from_array "${interfaces_arr[@]}"
read -p "- SSID: " ssid
read -p "- Password: " password
read -p "- 1st IP Field (e.g. 60 for AP 6): " ip
cat <<EOF > tools/wpa_tools/access_point.conf
  network={
    ssid="$1"
    mode=2
    key_mgmt=WPA-PSK
    psk="$2"
    frequency=2437
}
EOF
cd tools/wpa_tools
chmod +x create_access_point.sh
sudo bash create_access_point.sh $choice $ip
cd ../..
}

function access_point {
  echo '> Do you wish to...'
  ap_arr=('Connect to an Access Point?' 'Create an Access Point?')
  menu_from_array "${ap_arr[@]}"
  if [ $REPLY == "1" ]; then
    ap_connect
  elif [[ $REPLY == "2" ]]; then
    ap_create
  fi
}

function avahi_fetch_certificate {
  echo '> Fetching certificate from server...'
  read -p "- Server Username: " server_user
  # pull the key from the server
  scp $server_user@${1}:/home/${1}/mesh_com/modules/sc-mesh-secure-deployment/src/ecc_key.der src/ecc_key.der
  if [ $? -ne 0 ]; then
      echo "ERROR: Couldn't get certificate from server. Are you running the server from '/home/\$USER/mesh_com/..'?"
      exit 0
  fi
}


#-----------------------------------------------------------------------------#
# Main client/Server configuration functions
#-----------------------------------------------------------------------------#
function server {
  echo '> Configuring the mesh_tb server...'
  # Make the server
  pushd .
  cd ../..
  make mesh_tb_server
  popd
  # Advertise the server using avahi (zeroconf)
  avahi-publish-service mesh_server _http._tcp 5000 &
  # Install the server and provision the certificate generated by cryptolib
  sudo python3 src/server-mesh.py -c src/ecc_key.der
}

function client {
  echo '> Configuring the client...'
  # Make the client
  pushd .
  cd ../..
  make mesh_tb_client
  popd
  # Connect to the same AP as the server
  echo "> We need to be connect to the same network as the server to get \
          the certificate and setup a gateway (if first node)."
  ap_connect
  echo -n '> Looking for authentication server...'
  # Get server IPv4 and hostname
  # TODO: If we can't find the sercer we should exit
  while ! [ "$server_details" ] ; do
    server_details=$(timeout 7 avahi-browse -rptf _http._tcp | awk -F';' '$1 == "=" && $3 == "IPv4" && $4 == "mesh_server" {print $8 " " $7}')
  done
  # split ip/host into separate vars
  server_details=($(sed -r 's/\b.local\b//g' <<< $server_details))
  server_ip=${server_details[0]}
  server_host=${server_details[1]}
  echo "> We will use src/ecc_key.der if it already exists, or we can try and fetch it..."
  read -p "> Do you want to fetch the certificate from the server? (Y/N): " confirm
  if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
    avahi_fetch_certificate $server_ip
  fi
  echo '> Configuring the client and connecting to server...'
  sudo python3 src/client-mesh.py -c src/ecc_key.der -s http://$server_ip:5000
}
